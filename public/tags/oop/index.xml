<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>oop on Archives Hiko</title>
    <link>http://archiko.my.id/tags/oop/</link>
    <description>Recent content in oop on Archives Hiko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>id-id</language>
    <lastBuildDate>Sun, 19 Sep 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://archiko.my.id/tags/oop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>instance method, class method dan static method dipython</title>
      <link>http://archiko.my.id/blog/instance-class-dan-static-method/</link>
      <pubDate>Sun, 19 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>http://archiko.my.id/blog/instance-class-dan-static-method/</guid>
      <description>instance method itu adalah method yang ada didalam class ia menerima argumen self sebagai parameter pertamanya. yang mana nantinya akan berbeda dengan static method dan class method.
sintaks instance method
def func(self, arg1, arg2, ...) contoh dari instance method
class phone: def __init__(self): self.brand = &amp;#34;MIUI&amp;#34; def showBrand(self): return self.brand print (phone().showBrand()) #output: MIUI seperti inilah bentukan dari instance method, kalian bisa lihat dibagian paramater showBrand() ia diisi dengan self, dengan adanya self method showBrand() ini leluasa untuk memanggil atau merubah attribute-attribute yang ada didalam classnya sendiri.</description>
    </item>
    
    <item>
      <title>konstruktor init dan fungsi self - Python OOP</title>
      <link>http://archiko.my.id/blog/tentang-constructor-init-dan-self/</link>
      <pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>http://archiko.my.id/blog/tentang-constructor-init-dan-self/</guid>
      <description>__init__() pada python itu ada yang namanya magic keyword ciri-cirinya itu sederhana yaitu ada double underscore &amp;quot;__&amp;quot; nah salah satunya adalah __init__ini.
saat kita membuat sebuah class kita membutuhkan method __init__() ini
sebagai inisialisasi (menetapkan nilai) ketika object class dibuat. ia akan dijalankan pertama kali sebelum method-method lainnya dieksekusi.
class phone: def __init__(self): print (&amp;#39;booting proccess&amp;#39;) ponsel = phone() ponsel ini adalah sebuah instance (wujud dari class) yang didapat dari object phone(),saat kita mengisi sebuah variabel dengan object phone() ini, maka statement print() akan dijalankan.</description>
    </item>
    
  </channel>
</rss>
